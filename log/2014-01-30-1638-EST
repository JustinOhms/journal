Thu Jan 30 16:38:29 EST 2014

#~ Completed data loss prevention changes to entry package
Fixed up the intended work flow to avoid data loss.
See the Completed Idea from this log.

I also specified that an entry must have a commit message header.
The user of the entry package is intended to re-open the editor if a commit message is missing.
When I was doing this I caught an issue with Close()'ing an entry that doesn't have any Idea blocks.
It was reaching EOF and returning that from Close() as an error which was incorrect behavior.
This could use a separate spec in the future, but for now is covered by the commit message spec.

The entry package is ready to be implemented by the `new` command.
But before this happens the Idea storage design needs to be implemented.
I torn about what level should do the directory management for the Idea storage design.
Should be it in the idea package? Maybe a type Ideas, that represents the directory.
That would equate to something like this in use.

```go
ideas, _ := openEntry.Ideas()
for _, idea := range ideas {
    // Would be responsible for assigning an ID
    journal.Ideas.WriteIdea(idea)
}

for _, idea := range ideas {
    journal.Commit(idea)
}

closedEntry, _ := openEntry.Close()
```

Pretty sure this is what I want.
I like the look of it right now.
Might change my mind by the time I get to it.

## [completed] Impose Entry workflow that should prevent data loss
I'm also sort of worried about Ideas getting lost between Close() and when they've been written to files.
So I'm thinking maybe the package user calls OpenEntry.Ideas() before Close() and saves the Ideas then.
If that's successful, then Close() is called.
To impose this path on the user, the []idea.Idea return val from Close() will be removed.
This would force a call to Ideas() before Close() if the user wants a list of Ideas.
Then if there was an error while saving that list there still exist in the un-truncated entry file.

- [X] Scan entry for Idea's in OpenEntry.Ideas() method
- [X] Remove []idea.Idea rval from OpenEntry.Close()


## [active] Idea Storage
Right now each Idea is getting repeated with each entry.
In the short run this is fine and will work for the immediate future.
But in the long run I don't like it at all.

If we splice the Ideas out of the entry and store them by themselves we get the following for free.

- Modification tracking through git, don't have to make it ourselves
- Idea indexing by ID
- Can change the name of an Idea
- No stress to keep the Idea short
- Idea browsing without having to parse through all the previous journal entries

It's a persistent document, It should be treated as such.

So heres the plan.
Editing and saving Ideas will function the same.
They will be appended to the entry when it is made and you can edit them the same way.
When the entry is saved and the editor is closed we parse out the Ideas and removed them from the entry.
If an Idea is missing an Id, that means it's new and hasn't been seen before, so we give it one.

The Id is used as the filename for the Idea in the `$journal/idea/` directory.
Active Idea's can be indexed in the `$journal/idea/active` file, each line with an Id.
We store the next available Id in the `$journal/idea/next` file.

I should also go back and remove all the ideas from journal entries and bring them into the new system.
Should do this manually I think since I can track the renames and more major edits.
I could play around with automating this though, but I don't think it's worth the time right now.


Thu Jan 30 16:56:35 EST 2014
