Mon Jan 27 23:53:03 EST 2014

#~ Fixing up the Readme
First things first today I'm going to clean up the readme and transfer and remaining task's listed there into Idea form and store them in the Log.

## [completed] Simple Functionality
The real basics I needed start keeping my journal and log.
Automatic git commit's and some basic protections against breaking the repository causing manual intervention to clean up.

- [x] Don't allow a new entry is the git wd is dirty
- [x] Watch the journal entry file after it is created and store the time the entry was completed
    - Completed with ease after I learned I didn't have to syscall.Exec() the editor. See mutate.go
- [x] When the entry is completed store automatically make a git commit
- [x] Use a config file stored in $HOME/.journal-config.json or something to point to the journal git repository

## [inactive] `journal amend`
Pretty much a wrapper for `git amend`.
Open the previous entry in the editor and `git amend` afterwards.

## [inactive] `journal fix`
Something similar to the `go fix` command.
The data format of the journal entries has gone through some evolution and will continue to do so.
The fix command would assess the entrys in a journal and update them to the latest format.

## [inactive] `journal sync`
Sync a registered journal repositories.
Currently it isn't much of a hassle to do it manually.
But that's only 2 machines.
I'm sure it could get much much more complicated.

## [inactive] `journal last`
Open the last entry written in the editor as Read-Only
Could be utilized by a Vim extension so as you're writing the current entry it opens the last entry in a split window.

## [inactive] Event Identification
Something along the lines of, I mention in my entry that I'm going to sleep.
So the next entry asks me if I did, and around what time.

Using that data you could data mine your sleep patterns, doesn't require any high tech instruments either.
Use the Journal 2 times daily and when you wake up and before you sleep and you can monitor sleep patterns.

Other events that could be Identified that I'd like to monitor and mine for data are, Shower, Brushing Teeth, number 2 etc.
Some of these events like Showers I want to present a checklist for so I can monitor the consistency of my routine.

## [active] Ideas and Tasks
This is an Idea.

Currently Idea's cannot be renamed.
A way to fix this is to give an Idea a unique ID.
By default maybe it doesn't have an Id
- [ ] An Idea can have an Id

All tasks will be bound to an Idea.
Expected line form will be as follows.

- [ ] Task - {{.TaskText}}
- [ ] An Idea can have tasks

- [x] To find the currently active ideas, you search the previous journal entry.
- [x] All active Ideas found in the previous entry will be carried over to a new entry.
- [x] An inactive or completed idea doesn't get carried over to a new entry

If a task is checked off in an journal entry it is removed from the ideas task list with a commit.
The commit is seperate from the commit for the journal entry itself.

To make an Idea inactive you change the status to inactive in the journal entry.
An inactive Idea will not be carried into the next new entry.
To make an Idea active you type some sort of valid go template command.

Something like this perhaps?:
{{.Task.Find("Idea Manager")}}

And then when you save the entry file `journal` will use the file as a template and expand it.

- [ ] Vim snippets and maybe a filetype definition with closes'm going to open an Idea concerning missing specifications.


## [active] Software Architecture
I'm not exactly happy with what's happening due to this rapid feature adding.
Everything sort of getting out of hand, haha.
It's not quite there but some of the functions are really long.

I'd really like to revisit the Idea parser for some readability improvements.

I also have a way to handle the pre and post processing of the entry.

- [ ] Extract the entry into a type, currently it's just a big function
- [ ] Identify a common interface for Pre and Post processes
- [ ] Extract all current modifications into these Pre and Post processors
- [ ] Chain them together

Regarding the `type Command` that was yanked from the go cmd.
It isn't really all that useful.
I think it'd be a good Idea to revisit this structure and simplify it.
Nothing from the struct itself is needed by the `new` command during execution

I'd like to get the command itself fully spec'ed.
Just today I realized how to test the command as used from the terminal.
Pretty proud of that realization, it will be useful in the future.


## [active] Missing Specifications
In a rush to get Idea's functional enough to use today I passed over a few specifications.
On top of that the terminal usage needs to be specified.
Realized that it wasn't a difficult task today, see main_test.go, and made specs for a few of todays additions

- [ ] Spec the terminal usage of the `journal` command
- [ ] Spec the "lastTwoBytes" tidbit
- [ ] From now on all flags and terminal interaction will be specced
- [ ] Spec the config to expand environment variables on the Directory
- [ ] During the newEntry func -> type conversion rewrite all specifications as the behavior is introduced to avoid missing anything


Tue Jan 28 00:18:31 EST 2014
