Tue Jan 28 02:22:59 EST 2014

#~ Grabbing a handle on specifying terminal interface | Also a Plan for Idea Storage improvement
Got my hands wet in improving the situation by specifying the Environment variables expansion behavior.
Moved all config files for test into the _test/ directory and they're generated during the test.

There's some low hanging fruit for DRY improvements there which should be fun.
Still many more specs to be made as well.

Also, using journal for this work log is making me realize I'd like Ideas to be stored separately.
Idea is as follows

## [active] Idea Storage
Right now each Idea is getting repeated with each entry.
In the short run this is fine and will work for the immediate future.
But in the long run I don't like it at all.

If we splice the Ideas out of the entry and store them by themselves we get the following for free.

- Modification tracking through git, don't have to make it ourselves
- Idea indexing by ID
- Can change the name of an Idea
- No stress to keep the Idea short
- Idea browsing without having to parse through all the previous journal entries

It's a persistent document, It should be treated as such.

So heres the plan.
Editing and saving Ideas will function the same.
They will be appended to the entry when it is made and you can edit them the same way.
When the entry is saved and the editor is closed we parse out the Ideas and removed them from the entry.
If an Idea is missing an Id, that means it's new and hasn't been seen before, so we give it one.

The Id is used as the filename for the Idea in the `$journal/idea/` directory.
Active Idea's can be indexed in the `$journal/idea/active` file, each line with an Id.
We store the next available Id in the `$journal/idea/next` file.

I should also go back and remove all the ideas from journal entries and bring them into the new system.
Should do this manually I think since I can track the renames and more major edits.
I could play around with automating this though, but I don't think it's worth the time right now.

## [active] Missing Specifications
In a rush to get Idea's functional enough to use today I passed over a few specifications.
On top of that the terminal usage needs to be specified.
Realized that it wasn't a difficult task today, see main_test.go, and made specs for a few of todays additions

- [ ] Spec Environment Expansion of all User provided path's
    - [x] config path
    - [x] config.directory path
- [ ] Spec the terminal usage of the `journal` command
- [ ] Spec the "lastTwoBytes" tidbit
- [ ] From now on all flags and terminal interaction will be specced
- [ ] During the newEntry func -> type conversion rewrite all specifications as the behavior is introduced to avoid missing anything

## [active] Software Architecture
I'm not exactly happy with what's happening due to this rapid feature adding.
Everything sort of getting out of hand, haha.
It's not quite there but some of the functions are really long.

I'd really like to revisit the Idea parser for some readability improvements.

I also have a way to handle the pre and post processing of the entry.

- [ ] Extract the entry into a type, currently it's just a big function
- [ ] Identify a common interface for Pre and Post processes
- [ ] Extract all current modifications into these Pre and Post processors
- [ ] Chain them together

Regarding the `type Command` that was yanked from the go cmd.
It isn't really all that useful.
I think it'd be a good Idea to revisit this structure and simplify it.
Nothing from the struct itself is needed by the `new` command during execution

I'd like to get the command itself fully spec'ed.
Just today I realized how to test the command as used from the terminal.
Pretty proud of that realization, it will be useful in the future.

## [inactive] Ideas and Tasks
Going to archive this for a bit.
No need to keep it around for now.

This is an Idea.

Currently Idea's cannot be renamed.
A way to fix this is to give an Idea a unique ID.
By default maybe it doesn't have an Id
- [ ] An Idea can have an Id

All tasks will be bound to an Idea.
Expected line form will be as follows.

- [ ] Task - {{.TaskText}}
- [ ] An Idea can have tasks

- [x] To find the currently active ideas, you search the previous journal entry.
- [x] All active Ideas found in the previous entry will be carried over to a new entry.
- [x] An inactive or completed idea doesn't get carried over to a new entry

If a task is checked off in an journal entry it is removed from the ideas task list with a commit.
The commit is seperate from the commit for the journal entry itself.

To make an Idea inactive you change the status to inactive in the journal entry.
An inactive Idea will not be carried into the next new entry.
To make an Idea active you type some sort of valid go template command.

Something like this perhaps?:
{{.Task.Find("Ideas and Tasks")}}

And then when you save the entry file `journal` will use the file as a template and expand it.

- [ ] Vim snippets and maybe a filetype definition with closes'm going to open an Idea concerning missing specifications.

Tue Jan 28 02:55:49 EST 2014
